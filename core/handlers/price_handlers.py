import datetime, time

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from core.keyboards.reply_keyboards import (
    start_keyboard,
    iphone_repair_keyboard,
    ipad_keyboard,
    ipad_repair_keyboard,
    iwatch_repair_keyboard,
    glass_repair_brand_list_keyboard,
    glass_repair_brand_list_iphone_sub_keyboard,
    iphone_sub_cat_1,
    notebook_sub_repair_keyboard
)

from core.states.Prices_State import PriceState
from core.utils.commands import set_commands
from services.DatabaseService import JSONService

router = Router()
jsdb = JSONService()

valid_buttons = [ "üì± –†–µ–º–æ–Ω—Ç iPhone", "ü™∂ –†–µ–º–æ–Ω—Ç iPad", "‚åöÔ∏è –†–µ–º–æ–Ω—Ç iWatch", "ü´ß –ü–µ—Ä–µ–∫–ª–µ–π–∫–∞", "üî¨ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", "üì≤ –ó–∞–º–µ–Ω–∞ –¥–∏—Å–ø–ª–µ—è", "üõ°Ô∏è –ó–∞–º–µ–Ω–∞ –∫–æ—Ä–ø—É—Å–∞", "‚ö° –®–ª–µ–π—Ñ –∑–∞—Ä—è–¥–∫–∏", "üé• –ó–∞–º–µ–Ω–∞ –∫–∞–º–µ—Ä—ã", "üîã –ó–∞–º–µ–Ω–∞ –ê–ö–ë", "üîÑ –°–±—Ä–æ—Å —Ü–∏–∫–ª–æ–≤ –ê–ö–ë", "üîô –ù–∞–∑–∞–¥", "üñ•Ô∏è iPad Series", "ü™∂ iPad Air Series", "üì± iPad Pro Series", "üîé iPad Mini Series", "üñºÔ∏è –°—Ç–µ–∫–ª–æ –¥–∏—Å–ø–ª–µ—è", "üõ°Ô∏è –°—Ç–µ–∫–ª–æ –∫–æ—Ä–ø—É—Å–∞", "üì∑ –°—Ç–µ–∫–ª–æ –∫–∞–º–µ—Ä—ã", "üìê –†–∞–º–∫–∞ –¥–∏—Å–ø–ª–µ—è", "üì± iPhone", "üñ•Ô∏è iPad", "‚åöÔ∏è iWatch", "üì± Samsung", "üì± Xiaomi", "üì± Honor", "üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "‚öôÔ∏è SWAP", "ü´• FaceID", "üîß –ó–∞–º–µ–Ω–∞ —Ç–∞—á—Å–∫—Ä–∏–Ω–∞", "üíª –ó–∞–º–µ–Ω–∞ –¥–∏—Å–ø–ª–µ—è", "üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä", "üî¨ –†–µ–º–æ–Ω—Ç CPU", "‚ö° –ó–∞–º–µ–Ω–∞ —à–ª–µ–π—Ñ–∞ –∑–∞—Ä—è–¥–∫–∏", "üîå –ó–∞–º–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∑–∞—Ä—è–¥–∞", "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "üõ†Ô∏è –ú–æ–¥—É–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç", "‚å®Ô∏è –ó–∞–º–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", "üíΩ –†–µ–º–æ–Ω—Ç –∫–æ—Ä–ø—É—Å–∞", "üîå –ó–∞–º–µ–Ω–∞ —Ä–∞–∑—ä–µ–º–æ–≤", "üîã –¶–µ–ø–∏ –ø–∏—Ç–∞–Ω–∏—è", "üõ†Ô∏è –ú–æ–Ω—Ç–∞–∂ BGA", "üñ•Ô∏è –ü—Ä–æ—à–∏–≤–∫–∞ BIOS", "üíæ –ü—Ä–æ—à–∏–≤–∫–∞ FirmWare (FW)", "üì∂ –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ä–µ–º–æ–Ω—Ç", "üîô –ù–∞–∑–∞–¥", "üíß –ß–∏—Å—Ç–∫–∞ –æ—Ç –≤–ª–∞–≥–∏", "üéß Digital Crown", "üßë‚Äçüîß –°—Ç–µ–∫–ª–æ –∫–æ—Ä–ø—É—Å–∞", "üì∂ –ü—Ä–æ—à–∏–≤–∫–∞", "üì≥ Android", "üíª –ù–æ—É—Ç–±—É–∫–∏" ]

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_admin(user_id: int) -> bool:
    user_record = await jsdb.find_one('users', {'tg_id': user_id})
    return user_record and user_record.get('role') == 'admin'

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await jsdb.init()

    if await jsdb.test_connection():
        if not await jsdb.find_all('users', {}):
            await jsdb.create('users', {
                'tg_id': message.from_user.id,
                'username': message.from_user.username,
                'first_name': message.from_user.first_name,
                'last_name': message.from_user.last_name,
                'last_activity': datetime.datetime.now().isoformat(),
                'role': 'admin'
            })
        elif not await jsdb.find_one('users', {'tg_id': int(message.from_user.id)}):
            await jsdb.create('users', {
                'tg_id': message.from_user.id,
                'username': message.from_user.username,
                'first_name': message.from_user.first_name,
                'last_name': message.from_user.last_name,
                'last_activity': datetime.datetime.now().isoformat(),
                'role': 'user'
            })

    await state.set_data({"menu_stack": []})
    await message.answer(f'{message.from_user.username}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=start_keyboard, parse_mode='HTML')
    await set_commands(message.bot, 'start', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
async def get_price(menu_stack, message: Message, is_admin: bool):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    request = " ".join(menu_stack)
    price_data = await jsdb.find_one('prices', {'category': request})

    if not price_data:
        if is_admin:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å", callback_data="add_price")]]
            )
            await message.answer(
                "–¢—É—Ç –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–π—Å, –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?", 
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            ...
        return None

    # –¢–µ–∫—Å—Ç –ø—Ä–∞–π—Å–∞
    price = price_data['price']

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    if is_admin:
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–∫—Å—Ç –ø—Ä–∞–π—Å–∞
        price_text = (
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {menu_stack[0]} - {menu_stack[-1]}\n"
            f"<b>–ü—Ä–∞–π—Å:</b>\n\n{price}"
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø—Ä–∞–π—Å–∞
        price_text = (
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {menu_stack[0]} - {menu_stack[-1]}\n"
            f"<b>–ü—Ä–∞–π—Å:</b>\n\n{price}"
        )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    # await message.answer(price_text, parse_mode='HTML')
    return price_text


@router.callback_query(F.data == "add_price")
async def add_price_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∞–π—Å–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", parse_mode='HTML')
    await state.update_data(price_category=" ".join((await state.get_data()).get("menu_stack", [])))
    await state.set_state(PriceState.price_message)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–π—Å–∞
@router.message(F.text != "" and PriceState.price_message)
async def save_price_handler(message: Message, state: FSMContext):
    state_data = await state.get_data()
    category = state_data.get("price_category")
    price_id = await jsdb.find_one('prices', {'category': category})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∞–π—Å –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    existing_price = await jsdb.find_one('prices', {'category': category})
    if existing_price:
        # –ï—Å–ª–∏ –ø—Ä–∞–π—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        await jsdb.update('prices', price_id.get('id'), {'price': message.html_text})
        await message.reply("–ü—Ä–∞–π—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", parse_mode='HTML', reply_markup=start_keyboard)
    else:
        # –ï—Å–ª–∏ –ø—Ä–∞–π—Å –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        await jsdb.create('prices', {'category': category, 'price': message.html_text})
        await message.reply("–ü—Ä–∞–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", parse_mode='HTML', reply_markup=start_keyboard)

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–π—Å–∞
@router.callback_query(F.data == "edit_price")
async def edit_price_handler(callback: CallbackQuery, state: FSMContext):
    menu_stack = (await state.get_data()).get("menu_stack", [])
    category = " ".join(menu_stack)
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∞–π—Å –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    price_data = await jsdb.find_one('prices', {'category': category})
    
    if price_data:
        await callback.message.answer(f"–¢–µ–∫—É—â–∏–π –ø—Ä–∞–π—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b>: {price_data['price']}. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å.", parse_mode='HTML')
        await state.update_data(price_category=category)
        await state.set_state(PriceState.price_message)
    else:
        # –ï—Å–ª–∏ –ø—Ä–∞–π—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–π—Å", callback_data="add_price")]]
        )
        await callback.message.answer(f"–ü—Ä–∞–π—Å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b> –Ω–µ —É–∫–∞–∑–∞–Ω. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å?", reply_markup=keyboard, parse_mode='HTML')

@router.message(F.text != "")
async def message_handler(message: Message, state: FSMContext):
    user_data = await state.get_data()
    menu_stack = user_data.get("menu_stack", [])

    if message.text not in valid_buttons:
        return
    if message.text != "üîô –ù–∞–∑–∞–¥":
        menu_stack.append(message.text)
        await state.update_data(menu_stack=menu_stack)


    if message.text != "üîô –ù–∞–∑–∞–¥":
        menu_stack.append(message.text)
        await state.update_data(menu_stack=menu_stack)

    is_admin_flag = await is_admin(message.from_user.id)
    price_data = await get_price(menu_stack, message, is_admin_flag)
    
    if price_data:
        if is_admin_flag:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–π—Å", callback_data="edit_price")]]
            )
            await message.reply(price_data, parse_mode='HTML', reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º", url="https://t.me/okkpedantnsk")]]
            )
            await message.answer(price_data, parse_mode='HTML', reply_markup=keyboard)

    if message.text in ["üì± –†–µ–º–æ–Ω—Ç iPhone", "ü™∂ –†–µ–º–æ–Ω—Ç iPad", "‚åöÔ∏è –†–µ–º–æ–Ω—Ç iWatch", "ü´ß –ü–µ—Ä–µ–∫–ª–µ–π–∫–∞"]:
        if message.text == "üì± –†–µ–º–æ–Ω—Ç iPhone":
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=iphone_repair_keyboard)
        elif message.text == "ü™∂ –†–µ–º–æ–Ω—Ç iPad":
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=ipad_keyboard)
        elif message.text == "‚åöÔ∏è –†–µ–º–æ–Ω—Ç iWatch":
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=iwatch_repair_keyboard)
        elif message.text == "ü´ß –ü–µ—Ä–µ–∫–ª–µ–π–∫–∞":
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", reply_markup=glass_repair_brand_list_keyboard)
        return

    if message.text == "üî¨ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã":
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=iphone_sub_cat_1)
        return

    if message.text == "üì± iPhone":
        await message.reply("–ß—Ç–æ –±—É–¥–µ–º –ø–µ—Ä–µ–∫–ª–µ–∏–≤–∞—Ç—å?", reply_markup=glass_repair_brand_list_iphone_sub_keyboard)
        return

    if message.text == "üíª –ù–æ—É—Ç–±—É–∫–∏":
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=notebook_sub_repair_keyboard, parse_mode='HTML')


    if message.text == "üîô –ù–∞–∑–∞–¥":
        if menu_stack:
            menu_stack.pop()
        await state.update_data(menu_stack=menu_stack)

        if not menu_stack:
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=start_keyboard)
        else:
            previous_menu = menu_stack[-1]
            if previous_menu == "üì± –†–µ–º–æ–Ω—Ç iPhone":
                await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=iphone_repair_keyboard)
            elif previous_menu == "ü™∂ –†–µ–º–æ–Ω—Ç iPad":
                await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=ipad_keyboard)
            elif previous_menu == "‚åöÔ∏è –†–µ–º–æ–Ω—Ç iWatch":
                await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=iwatch_repair_keyboard)
            elif previous_menu == "ü´ß –ü–µ—Ä–µ–∫–ª–µ–π–∫–∞":
                await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", reply_markup=glass_repair_brand_list_keyboard)
            elif previous_menu == "üíª –ù–æ—É—Ç–±—É–∫–∏":
                await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=start_keyboard)

    return
